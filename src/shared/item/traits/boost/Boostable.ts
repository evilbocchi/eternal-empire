import { getAllInstanceInfo } from "@antivivi/vrldk";
import Item from "shared/item/Item";
import ItemTrait from "shared/item/traits/ItemTrait";

declare global {
    interface ItemTraits {
        Boostable: Boostable;
    }

    /**
     * Represents a boost that can be applied to an item.
     */
    interface ItemBoost {
        /**
         * Whether the boost ignores the restrictions boosts usually have.
         */
        ignoresLimitations: boolean;
    }

    interface InstanceInfo {
        /**
         * The Boostable trait associated with the item of this model.
         */
        Boostable?: Boostable;

        /**
         * A map of all boosts on this item.
         * Automatically generated by {@link Boostable}.
         */
        Boosts?: Map<string, ItemBoost>;

        /**
         * Functions that are called when a boost is added to this item.
         * @param boost The boost that was added.
         */
        BoostAdded?: Set<(boost: ItemBoost) => void>;

        /**
         * Functions that are called when a boost is removed from this item.
         * @param boost The boost that was removed.
         */
        BoostRemoved?: Set<(boost: ItemBoost) => void>;
    }
}

export default class Boostable extends ItemTrait {
    /**
     * Adds a boost to an item.
     * @param instanceInfo The InstanceInfo of the item to add the boost to.
     * @param key The key of the boost to add.
     * @param boost The boost to add.
     * @returns Whether a boost was added.
     */
    static addBoost(instanceInfo: InstanceInfo, key: string, boost: ItemBoost) {
        const boosts = instanceInfo.Boosts ?? new Map<string, ItemBoost>();
        if (boosts.has(key)) return;
        boosts.set(key, boost);
        const boostAdded = instanceInfo.BoostAdded;
        if (boostAdded !== undefined) {
            for (const callback of boostAdded) {
                callback(boost);
            }
        }

        instanceInfo.Boosts = boosts;
    }

    /**
     * Removes a boost from an item.
     * @param instanceInfo The InstanceInfo of the item to remove the boost from.
     * @param key The key of the boost to remove.
     * @returns Whether a boost was removed.
     */
    static removeBoost(instanceInfo: InstanceInfo, key: string) {
        const boosts = instanceInfo.Boosts;
        if (boosts === undefined) return;

        const boost = boosts.get(key);
        if (boost === undefined) return;

        boosts.delete(key);
        const boostRemoved = instanceInfo.BoostRemoved;
        if (boostRemoved !== undefined) {
            for (const callback of boostRemoved) {
                callback(boost);
            }
        }
    }

    /**
     * Checks if an item model has a specific boost.
     * @param instanceInfo The InstanceInfo of the item model to check.
     * @param key The key of the boost to check for.
     * @returns Whether the item model has the specified boost.
     */
    static hasBoost(instanceInfo: InstanceInfo, key: string) {
        return instanceInfo.Boosts?.has(key) ?? false;
    }

    static load(model: Model, boostable: Boostable) {
        const instanceInfo = getAllInstanceInfo(model);
        instanceInfo.Boostable = boostable;
        instanceInfo.Boosts = new Map();
        instanceInfo.BoostAdded = new Set();
        instanceInfo.BoostRemoved = new Set();
    }

    constructor(item: Item) {
        super(item);
        item.onLoad((model) => Boostable.load(model, this));
    }
}
