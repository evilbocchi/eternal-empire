import Item from "shared/item/Item";
import ItemTrait from "shared/item/traits/ItemTrait";
import { getAllInstanceInfo } from "@antivivi/vrldk";

declare global {
    interface ItemTraits {
        Boostable: Boostable;
    }

    /**
     * Represents a boost that can be applied to an item.
     */
    interface ItemBoost {
        /**
         * The unique identifier for the boost placement.
         */
        placementId: string;

        /**
         * The item of the boost.
         */
        item: Item;

        /**
         * Whether the boost ignores the restrictions boosts usually have.
         */
        ignoresLimitations: boolean;
    }

    interface InstanceInfo {
        Boostable?: Boostable;
        /**
         * A map of all boosts on this item.
         * Automatically generated by {@link Boostable}.
         */
        Boosts?: Map<string, ItemBoost>;

        /**
         * Functions that are called when a boost is added to this item.
         */
        BoostAdded?: Set<() => void>;
        /**
         * Functions that are called when a boost is removed from this item.
         */
        BoostRemoved?: Set<() => void>;
    }
}

export default class Boostable extends ItemTrait {

    static addBoost(instanceInfo: InstanceInfo, boost: ItemBoost) {
        const boosts = instanceInfo.Boosts ?? new Map<string, ItemBoost>();
        boosts.set(boost.placementId, boost);
        instanceInfo.BoostAdded?.forEach(callback => callback());
        instanceInfo.Boosts = boosts;
    }

    static removeBoost(instanceInfo: InstanceInfo, placementId: string) {
        instanceInfo.Boosts?.delete(placementId);
        instanceInfo.BoostRemoved?.forEach(callback => callback());
    }

    static load(model: Model, boostable: Boostable) {
        const instanceInfo = getAllInstanceInfo(model);
        instanceInfo.Boostable = boostable;
        instanceInfo.Boosts = new Map();
        instanceInfo.BoostAdded = new Set();
        instanceInfo.BoostRemoved = new Set();
    }

    whitelist = new Set<string>();

    constructor(item: Item) {
        super(item);
        item.onLoad((model) => Boostable.load(model, this));
    }

    addToWhitelist(itemId: string) {
        this.whitelist.add(itemId);
        return this;
    }
}